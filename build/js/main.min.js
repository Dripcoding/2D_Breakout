!function(){"use strict";var o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},s=function(){function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}}(),t=function(){function t(){o(this,t),this.canvas=document.getElementById("myCanvas"),this.ctx=this.canvas.getContext("2d"),this.width=this.canvas.width,this.height=this.canvas.height}return s(t,[{key:"clear",value:function(){this.ctx.clearRect(0,0,this.width,this.height)}},{key:"detectEdgeCollisions",value:function(t,e,i){t.y+t.dy<t.ballRadius?(t.dy=-t.dy,t.changeColor()):t.y+t.dy>this.height-t.ballRadius&&(t.x>e.paddleX&&t.x<e.paddleX+e.paddleWidth?(t.dy=-t.dy,t.changeColor()):(i.lives--,0===i.lives?(alert("Game Over"),document.location.reload()):(t.x=this.width/2,t.y=this.height-30,e.paddleX=(this.width-e.paddleWidth)/2))),(t.x+t.dx<t.ballRadius||t.x+t.dx>this.width-t.ballRadius)&&(t.dx=-t.dx,t.changeColor())}},{key:"detectBrickCollisions",value:function(t,e,i){for(var n=0;n<e.brickColumnCount;n++)for(var o=0;o<e.brickRowCount;o++){var s=e.bricks[n][o];1===s.status&&t.x>s.x&&t.x<s.x+e.brickWidth&&t.y>s.y&&t.y<s.y+e.brickHeight&&(t.dy=-t.dy,t.changeColor(),s.status=0,i.score++,i.score==e.brickRowCount*e.brickColumnCount&&(alert("You Win! Congrats!"),document.location.reload()))}}}]),t}(),i=function(){function n(t,e,i){o(this,n),this.ballColor="#0095DD",this.x=e/2,this.y=t-30,this.ballRadius=10,this.dx=i.dx,this.dy=i.dy}return s(n,[{key:"changeColor",value:function(){var t="rgb("+256*Math.random()+", "+256*Math.random()+", "+256*Math.random()+")";this.ballColor=t}},{key:"drawBall",value:function(t){t.ctx.beginPath(),t.ctx.arc(this.x,this.y,this.ballRadius,0,2*Math.PI),t.ctx.fillStyle=this.ballColor,t.ctx.fill(),t.ctx.closePath()}},{key:"update",value:function(){this.x+=this.dx,this.y+=this.dy}}]),n}(),e=function(){function i(){o(this,i),this.brickColor="#0095DD",this.brickRowCount=10,this.brickColumnCount=7,this.brickWidth=75,this.brickHeight=20,this.brickPadding=10,this.brickOffsetTop=50,this.brickOffsetLeft=160,this.bricks=[];for(var t=0;t<this.brickColumnCount;t++){this.bricks[t]=[];for(var e=0;e<this.brickRowCount;e++)this.bricks[t][e]={x:0,y:0,status:1}}}return s(i,[{key:"drawBricks",value:function(t){for(var e=0;e<this.brickColumnCount;e++)for(var i=0;i<this.brickRowCount;i++){var n=this.bricks[e][i];if(1===n.status){var o=e*(this.brickWidth+this.brickPadding)+this.brickOffsetLeft,s=i*(this.brickHeight+this.brickPadding)+this.brickOffsetTop;n.x=o,n.y=s,t.ctx.beginPath(),t.ctx.rect(n.x,n.y,this.brickWidth,this.brickHeight),t.ctx.fillStyle=this.brickColor,t.ctx.fill(),t.ctx.closePath()}}}}]),i}(),n=function(){function e(t){o(this,e),this.paddleColor="#0095DD",this.paddleHeight=10,this.paddleWidth=75,this.paddleX=(t.width-this.paddleWidth)/2}return s(e,[{key:"drawPaddle",value:function(t){t.ctx.beginPath(),t.ctx.rect(this.paddleX,t.height-this.paddleHeight,this.paddleWidth,this.paddleHeight),t.ctx.fillStyle=this.paddleColor,t.ctx.fill(),t.ctx.closePath()}},{key:"update",value:function(t){this.paddleX+=t}}]),e}(),a=function(){function e(t){o(this,e),this.lives=t.lives,this.score=0,this.opponentScore=0,this.opponentLives=0,this.x=0,this.y=0}return s(e,[{key:"drawScore",value:function(t){t.ctx.font="24px Arial",t.ctx.fillStyle="#0095DD",t.ctx.fillText("Score: "+this.score,8,20),t.ctx.fillText("Opponent's Score: "+this.opponentScore,8,40)}},{key:"drawLives",value:function(t){t.ctx.font="24px Arial",t.ctx.fillStyle="#0095DD",t.ctx.fillText("Lives: "+this.lives,t.width-90,20),t.ctx.fillText("Opponent's Lives: "+this.opponentLives,t.width-218,40)}},{key:"update",value:function(t,e,i){this.lives+=t,this.username=e,this.score+=i}}]),e}(),r=io.connect("https://breakout-2d.herokuapp.com");document.write('<script src="https://'+(location.host||"localhost").split(":")[0]+':35729/livereload.js?snipver=1"><\/script>');var d=function(){function t(){o(this,t),this.rightPressed=!1,this.leftPressed=!1,this.players=[],window.addEventListener("keydown",this.keyDownHandler,!1),window.addEventListener("keyup",this.keyUpHandler,!1),window.addEventListener("mousemove",this.mouseMoveHandler,!1),h.addEventListener("click",v,!1),u.addEventListener("click",v,!1),y.addEventListener("click",v,!1),f.addEventListener("click",v,!1)}return s(t,[{key:"init",value:function(){var t=this;requestAnimationFrame(function(){return t.draw(k)})}},{key:"draw",value:function(t){var e=this;console.log("MODE "+c.name),t.clear(),t.ctx.beginPath(),x.drawPaddle(t),m.drawBricks(t),p.drawBall(t),b.drawScore(t),b.drawLives(t),t.detectBrickCollisions(p,m,b),t.detectEdgeCollisions(p,x,b),r.emit("playerScored",b),r.emit("playerLife",b),this.rightPressed&&x.paddleX<t.width-x.paddleWidth?x.update(7):this.leftPressed&&0<x.paddleX&&x.update(-7),p.update(),!1===l&&requestAnimationFrame(function(){e.draw(t)})}},{key:"keyDownHandler",value:function(t){39===t.keyCode?w.rightPressed=!0:37===t.keyCode?w.leftPressed=!0:80===t.keyCode?!1===(l=!l)&&w.init():81===t.keyCode&&(console.log("player quit game"),alert("You quit. Game Over!"),document.location.reload())}},{key:"keyUpHandler",value:function(t){39===t.keyCode?w.rightPressed=!1:37===t.keyCode&&(w.leftPressed=!1)}},{key:"mouseMoveHandler",value:function(t){var e=t.clientX-k.canvas.offsetLeft;0<e&&e<k.width&&(x.paddleX=e-x.paddleWidth/2)}}]),t}(),l=!0,c={name:"very easy",dx:1.5,dy:-1.5,lives:5},h=document.querySelector(".easy-mode-btn"),u=document.querySelector(".medium-mode-btn"),y=document.querySelector(".hard-mode-btn"),f=document.querySelector(".marathon-mode-btn");function v(t){var e=t.target.name;"easy"===e?(c={name:"easy",dx:2,dy:-2,lives:3},console.log("mode changed to easy",c)):"medium"===e?(c={name:"medium",dx:3,dy:-3,lives:3},console.log("mode changed to medium",c)):"hard"===e?(c={name:"hard",dx:4,dy:-4,lives:2},console.log("mode changed to hard",c)):(c={name:"marathon",dx:5,dy:-5,lives:2},console.log("mode changed to marathon",c)),p=new i(k.height,k.width,c),b=new a(c)}var k=new t,p=new i(k.height,k.width,c),m=new e(k),x=new n(k),b=new a(c),w=new d;r.on("otherPlayerScore",function(t){b.opponentScore=t}),r.on("otherPlayerLife",function(t){b.opponentLives=t}),w.init()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
